generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workflow {
  id            String         @id @default(uuid())
  name          String
  description   String?
  status        WorkflowStatus @default(DRAFT)
  triggersCount Int            @default(0)
  actionsCount  Int            @default(0)
  lastEdited    DateTime       @default(now())
  createdAt     DateTime       @default(now())
  edges         Edge[]
  nodes         Node[]
  workflowRuns  WorkflowRun[]
}

model Node {
  id            String         @id @default(uuid())
  workflowId    String
  type          NodeType
  label         String?
  positionX     Float
  positionY     Float
  createdAt     DateTime       @default(now())
  outgoing      Edge[]         @relation("SourceNode")
  incoming      Edge[]         @relation("TargetNode")
  executionLogs ExecutionLog[]
  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  config        NodeConfig?
}

model NodeConfig {
  id     String @id @default(uuid())
  nodeId String @unique
  config Json
  node   Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model Edge {
  id           String   @id @default(uuid())
  workflowId   String
  sourceNodeId String
  targetNodeId String
  label        String?
  condition    String?
  createdAt    DateTime @default(now())
  sourceNode   Node     @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode   Node     @relation("TargetNode", fields: [targetNodeId], references: [id], onDelete: Cascade)
  workflow     Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model WorkflowRun {
  id            String         @id @default(uuid())
  workflowId    String
  startedAt     DateTime       @default(now())
  completedAt   DateTime?
  status        RunStatus      @default(RUNNING)
  executionLogs ExecutionLog[]
  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionLog {
  id            String          @id @default(uuid())
  workflowRunId String
  nodeId        String?
  status        ExecutionStatus
  message       String?
  startedAt     DateTime?
  endedAt       DateTime?
  node          Node?           @relation(fields: [nodeId], references: [id])
  workflowRun   WorkflowRun     @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
}

model Integration {
  id        String   @id @default(uuid())
  type      String
  externalUserId String?
  accessToken    String?
  username       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WorkflowStatus {
  ACTIVE
  DRAFT
  PAUSED
}

enum NodeType {
  TRIGGER
  ACTION
  CONDITION
}

enum RunStatus {
  RUNNING
  COMPLETED
  FAILED
}

enum ExecutionStatus {
  PENDING
  SUCCESS
  ERROR
}
